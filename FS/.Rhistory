select(`Factors identified at the end of assessment`) %>%
table(useNA = "ifany") %>%
addmargins()
# Finding the code for 'trio of vulnerabilities' (MH/DA/SU)
# ",Domestic violence - Parent/Carer" = 3B
# ",Domestic violence - Child" = 3A
# ",Domestic violence - Other" = 3C
# ",Mental health concerns - Parent/Carer" = 4B
# ",Drug misuse - Parent/Carer" = 2B
# ",Alcohol misuse - Parent/Carer" = 1B
# Recoding the factors identified at assessment from words to number code: ----
# Create a vector of column names to apply the recoding
cols_to_recode <- paste0("split_", 1:18)
# PARENTAL MENTAL HEALTH ----
# Define the recode function
# Make sure to trim white space around the words
recode_function <- function(x) {
ifelse(trimws(x) == "Mental health concerns - Parent/Carer", "4B", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# PARENTAL DRUG MISUSE ----
recode_function <- function(x) {
ifelse(trimws(x) == "Drug misuse - Parent/Carer", "2B", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# PARENTAL ALCOHOL MISUSE ----
recode_function <- function(x) {
ifelse(trimws(x) == "Alcohol misuse - Parent/Carer", "1B", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# DV PARENT ----
recode_function <- function(x) {
ifelse(trimws(x) == "Domestic violence - Parent/Carer", "3B", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# DV CHILD ----
recode_function <- function(x) {
ifelse(trimws(x) == "Domestic violence - Child", "3A", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# DV OTHER ----
recode_function <- function(x) {
ifelse(trimws(x) == "Domestic violence - Other", "3C", x)
}
# Apply the recode function to selected columns by column number
bind_wands_dr2 <- bind_wands_dr2 %>%
mutate_at(vars(cols_to_recode), funs(recode_function(.)))
# Recode outcome at single assessment as binary----
str(bind_wands_dr2$`Outcome of Single Assessment`)
bind_wands_dr2 %>%
select(`Outcome of Single Assessment`) %>%
table(useNA = "ifany") %>%
addmargins()
# Incomplete      N/A        no        No     Not recorded      yes       Yes
#     18          219       572      5682          604          2467      861
#  <NA>          Sum
#   1769        12192
# Code the no, No as : 0. Code the yes and Yes as : 1. Code incomplete, N/A <NA> and not recorded as NA.
bind_wands_dr2$`Outcome of Single Assessment` <-
ifelse(bind_wands_dr2$`Outcome of Single Assessment`== "Incomplete", NA,
ifelse(bind_wands_dr2$`Outcome of Single Assessment` == "no", 0,
ifelse(bind_wands_dr2$`Outcome of Single Assessment` == "yes", 1,
bind_wands_dr2$`Outcome of Single Assessment`)))
bind_wands_dr2$`Outcome of Single Assessment` <-
ifelse(bind_wands_dr2$`Outcome of Single Assessment`== "N/A", NA,
ifelse(bind_wands_dr2$`Outcome of Single Assessment` == "No", 0,
ifelse(bind_wands_dr2$`Outcome of Single Assessment` == "Yes", 1,
bind_wands_dr2$`Outcome of Single Assessment`)))
bind_wands_dr2$`Outcome of Single Assessment` <-
ifelse(bind_wands_dr2$`Outcome of Single Assessment`== "Not recorded", NA,
bind_wands_dr2$`Outcome of Single Assessment`)
bind_wands_dr2 %>%
select(`Outcome of Single Assessment`) %>%
table(useNA = "ifany") %>%
addmargins()
# 0     1     <NA>   Sum
# 6254  3328  2610   12192
# Converting year and month into age at time of referral ----
bind_wands_dr2$ageatref <- floor(as.numeric(difftime(bind_wands_dr2$`Referral Date`,
bind_wands_dr2$`Year and month of birth of the child`,
units = "days")/365.25))
new_order <- c(1:10, 32, 11:31)
bind_wands_dr2 <- bind_wands_dr2[, new_order]
# Creating binary for whether referral reason included MH, DA, SU (trio of vulnerabilities) ----
# 0 = not present. 1 = present.
# Define the observations to check for
trio_obs <- c("3B", "3A", "3C", "4B", "2B", "1B")
# Create a new binary column
# NOTE: More complicated code was needed to account for the fact most observations were NA.
bind_wands_dr2 <- bind_wands_dr2 %>%
rowwise() %>%
mutate(reftrio = ifelse(any(str_trim(c_across(starts_with("split_"))) %in% trio_obs, na.rm = TRUE),
1, 0)) %>% ungroup()
# Creating a unique identifier to merge on ----
bind_wands_dr2$concat_id <- paste(bind_wands_dr2$`Child ID`, bind_wands_dr2$`Referral ID (or Case ID)`)
# Add variable for LA ----
bind_wands_dr2$LA <- "Wandsworth"
# Adding LA to case ID ----
bind_wands_dr2$childla_id <- paste(bind_wands_dr2$`Child ID`, bind_wands_dr2$`LA`)
new_order <- c(36, 1:35)
bind_wands_dr2 <- bind_wands_dr2[, new_order]
###Duplicates
# Check for duplicate rows where all columns are the same
duplicates <- duplicated(bind_wands_dr2) | duplicated(bind_wands_dr2, fromLast = TRUE)
# duplicates: 6,208
# Show duplicate rows
wandduplicate_rows <- bind_wands_dr2[duplicates, ]
print(wandduplicate_rows)
# I checked, and none of the individual Wandsworth files include duplicates. This suggests that their are time overlaps between them.
is.na(bind_wands_dr2$`Year and month of birth of the child`) %>% sum ()  #8806
################################################################################
# Preparing the datasets: recoding so that they are in a format that can be merged ----
# Exploring the class of Child ID
dataframe_names <- c("bind_lancs_dr2", "bind_swind_dr2", "bind_telford_dr2", "bind_walsall_dr2", "bind_wands_dr2")
# Child ID ----
# Loop over the dataframe names
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
childid_class <- class(df$`Child ID`)
# Print the result
cat("Class of child id in Dr2", df_name, ":", childid_class, "\n")
}
#Class of child id in Dr2 bind_lancs_dr2 : numeric
#Class of child id in Dr2 bind_swind_dr2 : numeric
#Class of child id in Dr2 bind_telford_dr2 : character
#Class of child id in Dr2 bind_walsall_dr2 : numeric
#Class of child id in Dr2 bind_wands_dr2 : numeric
#As some of telford's referral IDs contain letters, conver the rest to character. Re-run is.na after each conversion to ensure no NA added.
# Lanc
is.na (bind_lancs_dr2$`Child ID`) %>% sum () # 0
bind_lancs_dr2$`Child ID` <- as.character(bind_lancs_dr2$`Child ID`)
# swind
is.na(bind_swind_dr2$`Child ID`) %>% sum () #0
bind_swind_dr2$`Child ID` <- as.character(bind_swind_dr2$`Child ID`)
# walsall
is.na(bind_walsall_dr2$`Child ID`) %>% sum () #0
bind_walsall_dr2$`Child ID` <- as.character(bind_walsall_dr2$`Child ID`)
# wands
is.na(bind_wands_dr2$`Child ID`) %>% sum () #0
bind_wands_dr2$`Child ID` <- as.character(bind_wands_dr2$`Child ID`)
# As some of Swindon's referral IDs contain letters, convert the rest to charcter.
# Lanc
is.na(bind_lancs_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_lancs_dr2$`Referral ID (or Case ID)` <- as.character(bind_lancs_dr2$`Referral ID (or Case ID)`)
# Tel
is.na(bind_telford_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_telford_dr2$`Referral ID (or Case ID)` <- as.character(bind_telford_dr2$`Referral ID (or Case ID)`)
# Walsall
is.na(bind_walsall_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_walsall_dr2$`Referral ID (or Case ID)` <- as.character(bind_walsall_dr2$`Referral ID (or Case ID)`)
# Wandsworth
is.na(bind_wands_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_wands_dr2$`Referral ID (or Case ID)` <- as.character(bind_wands_dr2$`Referral ID (or Case ID)`)
# Referral ID ----
# Loop over the dataframe names
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
refid_class <- class(df$`Referral ID (or Case ID)`)
# Print the result
cat("Class of ref id in Dr2", df_name, ":", refid_class, "\n")
}
#Class of ref id in Dr2 bind_lancs_dr2 : numeric
#Class of ref id in Dr2 bind_swind_dr2 : character
#Class of ref id in Dr2 bind_telford_dr2 : numeric
#Class of ref id in Dr2 bind_walsall_dr2 : numeric
#Class of ref id in Dr2 bind_wands_dr2 : numeric
# As some of Swindon's referral IDs contain letters, convert the rest to charcter.
# Lanc
is.na(bind_lancs_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_lancs_dr2$`Referral ID (or Case ID)` <- as.character(bind_lancs_dr2$`Referral ID (or Case ID)`)
# Tel
is.na(bind_telford_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_telford_dr2$`Referral ID (or Case ID)` <- as.character(bind_telford_dr2$`Referral ID (or Case ID)`)
# Walsall
is.na(bind_walsall_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_walsall_dr2$`Referral ID (or Case ID)` <- as.character(bind_walsall_dr2$`Referral ID (or Case ID)`)
# Wandsworth
is.na(bind_wands_dr2$`Referral ID (or Case ID)`) %>% sum ()   #0
bind_wands_dr2$`Referral ID (or Case ID)` <- as.character(bind_wands_dr2$`Referral ID (or Case ID)`)
# UASC ----
# Loop over the dataframe names
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
uasc_class <- class(df$`Unaccompanied Asylum Seeker`)
# Print the result
cat("Class of uasc in Dr2", df_name, ":", uasc_class, "\n")
}
#Class of uasc in Dr2 bind_lancs_dr2 : character
#Class of uasc in Dr2 bind_swind_dr2 : character
#Class of uasc in Dr2 bind_telford_dr2 : character
#Class of uasc in Dr2 bind_walsall_dr2 : numeric
#Class of uasc in Dr2 bind_wands_dr2 : character
# AWAITING REPLY FROM TELFORD on coding of UASC
is.na (bind_walsall_dr2$`Unaccompanied Asylum Seeker`) %>% sum () # 0
bind_walsall_dr2 %>%
select(`Unaccompanied Asylum Seeker`) %>%
table(useNA = "ifany") %>%
addmargins()
#    0      1    Sum
#  11283   20   11303
bind_walsall_dr2$`Unaccompanied Asylum Seeker` <- as.character(bind_walsall_dr2$`Unaccompanied Asylum Seeker`)
################################################################################
# TEMP COMBINED DATAFRAME ----
# Creating a temporary dataframe which excludes all the factors identified at end of assessment (other then the trio variable).
# This is temporary until the factors identified at end of assessment (FIA) variable is organised.
# Creating temp datasets with columns for FIA deleted
# Lancs
temp_lancs_dr2 <- bind_lancs_dr2[, -c(7:12)]
# Swindon
temp_swind_dr2 <- bind_swind_dr2[, -c(7,16:28)]
# Telford
temp_telford_dr2 <- bind_telford_dr2[, -c(7,16:31)]
# Walsall
temp_walsall_dr2 <- bind_walsall_dr2[, -c(7,16:28)]
# Wandsworth
temp_wands_dr2 <- bind_wands_dr2[, -c(7,16:33)]
all_dr2_bind <- bind_rows(temp_lancs_dr2, temp_swind_dr2, temp_telford_dr2, temp_walsall_dr2, temp_wands_dr2)
##########################################################
# To do next = group the factors identified at the end of assessment into the protocol groupings. Then delete the breakdown columns.
# Allowing you to bind the whole of DR2 into one (across LAs). Then merge on to DR3.
# These come from Appendix A: definitions and guidance for primary need codes (see module 3)
# These are not the same as factors identified at end of assessment
#The main need for which child started to receive services for this referral (if applicable), as defined in the CIN census
#included as a categorical variable:
#0 = Not stated,
#1 = Abuse or neglect,
#2 = Child's disability/illness,
#3 = Parental Disability/illness,
# 4 = Family in acute stress,
#5 = Family dysfunction,
#6 = Socially unacceptable,
#7 = Low income,
#8 = Absent parenting,
#9 = Cases other than Children in Need.
# Shortening variable names to make further cleaning easier-----
colnames(all_dr2_bind)
# Keep colname 1 the same as 'Child ID' in the DR3 files. Ease for merging.
colnames(all_dr2_bind)[1]  <- "child la id"
colnames(all_dr2_bind)[2]  <- "child id"
colnames(all_dr2_bind)[3]  <- "case id"
colnames(all_dr2_bind)[4]  <- "ref date"
colnames(all_dr2_bind)[5]  <- "no further action"
colnames(all_dr2_bind)[6]  <- "assess start date"
colnames(all_dr2_bind)[7]  <- "outcome of sa"
colnames(all_dr2_bind)[8]  <- "previous cpp"
colnames(all_dr2_bind)[9]  <- "gender"
colnames(all_dr2_bind)[10]  <- "dob"
colnames(all_dr2_bind)[11]  <- "age at ref"
colnames(all_dr2_bind)[12]  <- "ethnicity"
colnames(all_dr2_bind)[13]  <- "disability"
colnames(all_dr2_bind)[14] <- "uasc"
colnames(all_dr2_bind)[15] <- "ref trio"
colnames(all_dr2_bind)[16] <- "concat id"
colnames(all_dr2_bind)[17] <- "LA"
# Look at how Previous CPP and outcome of SA coded, as appears to be high missingness ----
# Previous CPP
all_dr2_bind %>%
select(`previous cpp`) %>%
table(useNA = "ifany") %>%
addmargins()
# 0        1     2     3     4     5    <NA>     Sum
# 24714  7240  1236   287    28     2   23618   57125
# EXPLORING PATTERENED MISSINGNESS
# Visual to see missingness by LA
all_dr2_bind %>%
gg_miss_var(show_pct = TRUE, facet = `LA`)
ggsave("Output/DR2_missing.png", width = 8, height = 6, units = "in")
# very high missingness in lancashire explore whether 0 was marked as NA.
bind_lancs_dr2 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
# high missingness in Swindon
bind_swind_dr2 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#Number of previous child protection plans
#0       1     2     3  <NA>   Sum
#7,866   558    71    11  2,386 10892
# It appears that some DR2 returns could have entered prev. CPP as NA rather than 0
swind_dr2_nov20 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#0     1    2   <NA>     Sum
#138   29    6   2386   2559
swind_dr2_nov21 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#0       1    2    3     Sum
#3626  411    43    6    4086
swind_dr2_nov22 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#   0    1    2    3  Sum
# 3090  107   15    4 3216
swind_dr2_apr23 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#0    1    2    3  Sum
#1012   11    7    1 1031
# high missingness in Telford
bind_telford_dr2 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
# Number of previous child protection plans
# 0       1    2    3    4   <NA>  Sum
# 2762 1254   47   12    3   1527 5605
telford_dr2_nov20  %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#0    1    2    3    4  Sum
#1241  219   47   12    3 1522
telford_dr2_nov21 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#0      1    Sum
#1521  320   1841
telford_dr2_nov22%>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
#1 <NA>  Sum
#669 1440 2109
View(all_dr2_bind)
colnames(all_dr2_bind)
#################################################
`previous cpp` = case_when(
`previous cpp` ==  0 ~ '0',
`previous cpp` ==  1 ~ '1',
`previous cpp` ==  2 ~ '2',
`previous cpp` > 2 ~ "3+"),
`previous cpp` = case_when(
`previous cpp` ==  0 ~ '0',
`previous cpp` ==  1 ~ '1',
`previous cpp` ==  2 ~ '2',
`previous cpp` > 2 ~ "3+"),
`previous cpp` = case_when(
`previous cpp` ==  0 ~ '0',
`previous cpp` ==  1 ~ '1',
`previous cpp` ==  2 ~ '2',
`previous cpp` > 2 ~ "3+")
all_dr2_bind$`previous cpp` <- dplyr::case_when(
all_dr2_bind$`previous cpp` == 0 ~ '0',
all_dr2_bind$`previous cpp` == 1 ~ '1',
all_dr2_bind$`previous cpp` == 2 ~ '2',
all_dr2_bind$`previous cpp` > 2 ~ '3+'
)
all_dr2_bind$`previous cpp` <- factor(
all_dr2_bind$`previous cpp`,
levels = c('0', '1', '2', '3+')
)
save(all_dr2_bind, file = "Output/DR2_bind.RData")
View(all_dr2_bind)
all_dr2_bind <- all_dr2_bind %>%
mutate(
gender = relevel(
factor(gender), ref = 'Male'),
ethnicity = relevel(
factor(ethnicity), ref = 'WBRI'),
disability = relevel(
factor(disability), ref = '0'),
#To add UASC once Teflord respond.
#unaccompanied_asylum_seeker = relevel(
#  factor(unaccompanied_asylum_seeker), ref = 'Not UASC'),
`no further action` = relevel(
factor(`no further action`), ref = 'Further action'),
`previous cpp` = relevel(
factor(`previous cpp`), ref = '0')
)
all_dr2_bind <- all_dr2_bind %>%
mutate(
gender = relevel(
factor(gender), ref = 'Male'),
ethnicity = relevel(
factor(ethnicity), ref = 'WBRI'),
disability = relevel(
factor(disability), ref = '0'),
#To add UASC once Teflord respond.
#unaccompanied_asylum_seeker = relevel(
#  factor(unaccompanied_asylum_seeker), ref = 'Not UASC'),
#`no further action` = relevel(
#  factor(`no further action`), ref = 'Further action'),
`previous cpp` = relevel(
factor(`previous cpp`), ref = '0')
)
# Clearing R -------------------------
rm(list = ls())
# Select actions ---------------------------------------------------------------
install.packages <- TRUE
clean_DR1 <- TRUE
clean_DR2 <- TRUE
clean_DR3 <- TRUE
merge_DRs <- TRUE
new_vars <- TRUE
# User paths -------------------------------------------------------------------
# Open project 'sfpc_familysafeguarding_cleaning'
# Packages used ----------------------------------------------------------------
# install packages if not already installed
packages <- c("tidyverse",
"dplyr",
"readxl",
"tibble",
"lubridate",
"data.table",
"arsenal",
"pacman",
"naniar")
# Install packes that are not yet installed
sapply(packages, function(x) {
if (!(x %in% installed.packages())) {
install.packages(x, dependencies = TRUE)
}
})
# Read in packages
lapply(packages, library, character.only = TRUE)
# Run code ---------------------------------------------------------------------
# Script 1
#                               DR1 CLEANING
#
# DR1: To run script which reads in and cleans the DR1 files from the five LAs
# Details: reads in 6 Excel files per LA, each containing data for a six month period.
# Combines data creating one dataframe per LA. Then combines these so that there
# is one dataframe containing all DR1 data across sites and time period.
if (clean_DR1) {source(file.path("Script/sfpc_cleaning_FS_DR1.R"))}
--------------------------------------------------------------------------------
# Script 2
#                               DR2 CLEANING
#
# DR2: To run script which reads in and cleans the DR2 files from the five LAs
# Details: reads in 6 Excel files per LA. Combines these so that there is one
# DR2 file per LA. Combines the LA dataframes into one dataframe containing
# all DR2 data across the time frame (referrals during the trial period).
if (clean_DR2) {source(file.path("Script/sfpc_cleaning_FS_DR2.R"))}
# Clearing R -------------------------
rm(list = ls())
# Select actions ---------------------------------------------------------------
install.packages <- TRUE
clean_DR1 <- TRUE
clean_DR2 <- TRUE
clean_DR3 <- TRUE
merge_DRs <- TRUE
new_vars <- TRUE
# User paths -------------------------------------------------------------------
# Open project 'sfpc_familysafeguarding_cleaning'
# Packages used ----------------------------------------------------------------
# install packages if not already installed
packages <- c("tidyverse",
"dplyr",
"readxl",
"tibble",
"lubridate",
"data.table",
"arsenal",
"pacman",
"naniar")
# Install packes that are not yet installed
sapply(packages, function(x) {
if (!(x %in% installed.packages())) {
install.packages(x, dependencies = TRUE)
}
})
# Read in packages
lapply(packages, library, character.only = TRUE)
# Run code ---------------------------------------------------------------------
# Script 1
#                               DR1 CLEANING
#
# DR1: To run script which reads in and cleans the DR1 files from the five LAs
# Details: reads in 6 Excel files per LA, each containing data for a six month period.
# Combines data creating one dataframe per LA. Then combines these so that there
# is one dataframe containing all DR1 data across sites and time period.
if (clean_DR1) {source(file.path("Script/sfpc_cleaning_FS_DR1.R"))}
--------------------------------------------------------------------------------
# Script 2
#                               DR2 CLEANING
#
# DR2: To run script which reads in and cleans the DR2 files from the five LAs
# Details: reads in 6 Excel files per LA. Combines these so that there is one
# DR2 file per LA. Combines the LA dataframes into one dataframe containing
# all DR2 data across the time frame (referrals during the trial period).
if (clean_DR2) {source(file.path("Script/sfpc_cleaning_FS_DR2.R"))}
clean_DR2 <- TRUE
if (clean_DR2) {source(file.path("Script/sfpc_cleaning_FS_DR2.R"))}
clean_DR3 <- TRUE
if (clean_DR3) {source(file.path("Script/sfpc_cleaning_FS_DR3.R"))}
if (clean_DR3) {source(file.path("Script/sfpc_cleaning_FS_DR3.R"))}
if (merge_DRs) {source(file.path("Script/SFPC_merging_FS.R"))}
if (new_vars) {source(file.path("Script/SFPC_constructing final vars_FS.R"))}
