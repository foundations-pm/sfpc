# NOV 21
swind_dr2_nov21$`Year and month of birth of the child` <-
ifelse(swind_dr2_nov21$`Year and month of birth of the child` == "Unborn",
as.Date("1900-01-01"),
as.Date(paste("01", swind_dr2_nov21$`Year and month of birth of the child`, sep = "/"),
format = "%d/%m/%Y"))
str(swind_dr2_nov21$`Year and month of birth of the child`)
View(swind_dr2_nov21)
# Cleaning the family safeguarding dataset for SFPC
# DR2 - child level data across LAs
setwd('C:/Users/EmilyWalker/Foundations/High-SFPC-Impact - Working folder/sfpc_familysafeguarding_cleaning')
# Combine all the DR2 for each LA.
# Open correct project before running code: 'sfpc_familysafeguarding_cleaning'
# Clearing R -------------------------
# rm(list = ls())
# Install and load tidyverse package ---------------------------
# install packages if not already installed
library(tidyverse)
library(dplyr)
library(readxl)
library(writexl)
library(tibble)
library(lubridate)
library(data.table)
library(arsenal)
# CIN Census ----
# https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1025195/Children_in_need_census_2022_to_2023_guide.pdf
# Factors identified at end of assessment:
# Parental substance misuse: 1B, 2B
# Parental mental health: 4B
# Domestic violence: 3A, 3B
# Reading LAs in individually ########
###################################################
# Reading in LANCASHIRE DR2 files ====
lancs_dr2_nov20 <- read_excel("Data/FS_DR2/lancashire_dr2_nov20.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
lancs_dr2_nov21 <- read_excel("Data/FS_DR2/lancashire_dr2_nov21.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
lancs_dr2_nov22 <- read_excel("Data/FS_DR2/lancashire_dr2_nov22.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
lancs_dr2_apr23 <- read_excel("Data/FS_DR2/lancashire_dr2_apr23.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
# Check the class of the Month variable
# NO FURTHER ACTION (recode before binding) =====
# Cannot bind Lancs as Referral no further action is a character in 1 file and numeric in 2
# Coded as: 1 (or true) if the referral was received but after initial consideration no further action was taken; Â·0 (or false) if the referral was received and after initial consideration further action was taken. This data item should not be left blank.
# Checking the class of the variable
class(lancs_dr2_nov20$`Referral No further action`)
#character
class(lancs_dr2_nov21$`Referral No further action`)
#numeric
class(lancs_dr2_nov22$`Referral No further action`)
#character
class(lancs_dr2_apr23$`Referral No further action`)
#numeric
# Exploring the variable to see whether converting to numeric would lose any data.
refnoaction_lanc_dr2_20 <- lancs_dr2_nov20 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
##MULTIVALUE      0         1         Sum
#26              946       99        9592
refnoaction_lanc_dr2_21 <- lancs_dr2_nov21 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
#   0    1    <NA>    Sum
# 6836   42     3    6881
refnoaction_lanc_dr2_22 <- lancs_dr2_nov22 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
##MULTIVALUE       0           1         Sum
#      6          6914        76        6996
# Testing turning the Referal no further action variable into numeric in 2020 and 2022 dataset.
# 2020: NOTE: this means losing the 26 'multivalue'observations to missing
lancs_dr2_nov20$`Referral No further action` <-
as.numeric(lancs_dr2_nov20$`Referral No further action`)
#NAs introduced by coercion
numeric_refnoaction_lanc_dr2_20 <- lancs_dr2_nov20 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
# 2022: NOTE: this means losing the 6 'multivalue' observations to missing
lancs_dr2_nov22$`Referral No further action` <-
as.numeric(lancs_dr2_nov22$`Referral No further action`)
#NAs introduced by coercion
numeric_refnoaction_lanc_dr2_22 <- lancs_dr2_nov22 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
# BINDING LANCS DR2 Files ====
# Row binding the files to see how much duplication/ same child ID in different files there is.
bind_lancs_dr2 <- bind_rows(lancs_dr2_nov20, lancs_dr2_nov21, lancs_dr2_nov22, lancs_dr2_apr23)
# CLEANING binded Lancs file -----
# CLEANING Lancs DATES ======
# Assessment actual start and referal date has time stamp as well as date. Remove by converting from POXIT to Date.
# Check the class of the assessment and referal dates in the separate dataframes.
dataframe_names <- c("lancs_dr2_nov20", "lancs_dr2_nov21", "lancs_dr2_nov22", "lancs_dr2_apr23")
# REFERAL DATE
# Loop over the dataframe names
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
refdate_class <- class(df$`Referral Date`)
# Print the result
cat("Class of referal date", df_name, ":", refdate_class, "\n")
}
# Class of referal date lancs_dr2_nov20 : POSIXct POSIXt
# Class of referal date lancs_dr2_nov21 : POSIXct POSIXt
# Class of referal date lancs_dr2_nov22 : POSIXct POSIXt
# Class of referal date lancs_dr2_apr23 : POSIXct POSIXt
# ASSESSMENT DATE
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
assessdate_class <- class(df$`Assessment actual start date`)
# Print the result
cat("Class of assessment date", df_name, ":", assessdate_class, "\n")
}
# Class of assessment date lancs_dr2_nov20 : POSIXct POSIXt
# Class of assessment date lancs_dr2_nov21 : POSIXct POSIXt
# Class of assessment date lancs_dr2_nov22 : POSIXct POSIXt
# Class of assessment date lancs_dr2_apr23 : POSIXct POSIXt
# Converting POSIX to Date to drop the time stamp
bind_lancs_dr2$`Assessment actual start date`<-
as.Date(bind_lancs_dr2$`Assessment actual start date`)
bind_lancs_dr2$`Referral Date`<-
as.Date(bind_lancs_dr2$`Referral Date`)
# Recode disability status ----
bind_lancs_dr2 %>%
select(`Disabled status`) %>%
table(useNA = "ifany") %>%
addmargins()
# N      Y      <NA>   Sum
# 22737  1264   16    24017
# recode as binary variable
bind_lancs_dr2$`Disabled status` <-
ifelse(bind_lancs_dr2$`Disabled status` == "N", 0,
ifelse(bind_lancs_dr2$`Disabled status` == "Y", 1,
bind_lancs_dr2$`Disabled status`))
# 0        1    <NA>   Sum
# 22737  1264    16   24017
# Recode UASC ----
bind_lancs_dr2 %>%
select(`Unaccompanied Asylum Seeker`) %>%
table(useNA = "ifany") %>%
addmargins()
#MULTIVALUE           N           Y         Sum
#         4       23929          84       24017
# Checking the original file, these are also MULTIVALUE. Mark these down as missing.
bind_lancs_dr2$`Unaccompanied Asylum Seeker` <-
ifelse(bind_lancs_dr2$`Unaccompanied Asylum Seeker` == "#MULTIVALUE", NA,
ifelse(bind_lancs_dr2$`Unaccompanied Asylum Seeker` == "N", 0,
ifelse(bind_lancs_dr2$`Unaccompanied Asylum Seeker` == "Y", 1,
bind_lancs_dr2$`Unaccompanied Asylum Seeker`)))
#   0         1     <NA>   Sum
#  23929      84     4     24017
# Recode outcome at assessment as binary ----
bind_lancs_dr2 %>%
select(`Outcome of Single Assessment`) %>%
table(useNA = "ifany") %>%
addmargins()
#    No     Yes   <NA>   Sum
#   11782   7746  4489   24017
bind_lancs_dr2$`Outcome of Single Assessment` <-
ifelse(bind_lancs_dr2$`Outcome of Single Assessment` == "No", 0,
ifelse(bind_lancs_dr2$`Outcome of Single Assessment` == "Yes", 1,
bind_lancs_dr2$`Outcome of Single Assessment`))
# Recode month and year into date ----
str(bind_lancs_dr2$`Year and month of birth of the child`)
bind_lancs_dr2$`Year and month of birth of the child` <-
as.Date(paste("01", bind_lancs_dr2$`Year and month of birth of the child`,
sep = "/"), format = "%d/%m/%Y")
# Create variable for age at time of referral ----
bind_lancs_dr2$ageatref <- floor(as.numeric(difftime(bind_lancs_dr2$`Referral Date`,
bind_lancs_dr2$`Year and month of birth of the child`,
units = "days")/365.25))
# # Moving age so that is is next to year of birth variable
new_order <- c(1:15, 19, 16:18)
bind_lancs_dr2 <- bind_lancs_dr2[, new_order]
# Recode ethnicity ----
table(bind_lancs_dr2$Ethnicity)
bind_lancs_dr2$Ethnicity <- as.factor(bind_lancs_dr2$Ethnicity)
#Create a binary (0/1) indicator variables for each category or level of the ethnicity variable.
# Use one-hot encoding
#ethnicity_df <- data.frame(model.matrix(~ Ethnicity - 1, data = bind_lancs_dr2))
# Rename the columns for clarity
#colnames(ethnicity_df) <- gsub("Ethnicity", "", colnames(ethnicity_df))
# Add the one-hot encoded variables to the original data frame
#bind_lancs_dr2 <- cbind(bind_lancs_dr2, ethnicity_df)
# Recoding factors identified at assessment so that it is a similar format to the other LAs ----
colnames(bind_lancs_dr2)
#"Factors identified at the end of assessment 1B"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 1B`) %>%
table(useNA = "ifany") %>%
addmargins()
#   No     Yes   <NA>   Sum
#   16003  3503  4511   24017
# Exploring NA, these are the cases which have not yet had an actual assessment date. In the model control for this.
bind_lancs_dr2$`Factors identified at the end of assessment 1B` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 1B` == "Yes", "1B",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 1B` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 1B`))
#"Factors identified at the end of assessment 2B"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 2B`) %>%
table(useNA = "ifany") %>%
addmargins()
# No      Yes    <NA>    Sum
# 16094   3413   4510   24017
bind_lancs_dr2$`Factors identified at the end of assessment 2B` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 2B` == "Yes", "2B",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 2B` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 2B`))
#"Factors identified at the end of assessment 3B"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 3B`) %>%
table(useNA = "ifany") %>%
addmargins()
#No     Yes   <NA>   Sum
#14091  5422  4504   24017
bind_lancs_dr2$`Factors identified at the end of assessment 3B` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3B` == "Yes", "3B",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3B` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 3B`))
#"Factors identified at the end of assessment 3A"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 3A`) %>%
table(useNA = "ifany") %>%
addmargins()
#    No    Yes  <NA>    Sum
#   17683  1829  4505   24017
bind_lancs_dr2$`Factors identified at the end of assessment 3A` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3A` == "Yes", "3A",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3A` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 3A`))
#"Factors identified at the end of assessment 3C"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 3C`) %>%
table(useNA = "ifany") %>%
addmargins()
#   No   Yes  <NA>   Sum
#18979   531  4507 24017
bind_lancs_dr2$`Factors identified at the end of assessment 3C` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3C` == "Yes", "3C",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 3C` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 3C`))
#"Factors identified at the end of assessment 4B"
bind_lancs_dr2 %>%
select(`Factors identified at the end of assessment 4B`) %>%
table(useNA = "ifany") %>%
addmargins()
#   No   Yes  <NA>   Sum
#12409  7097  4511  24017
bind_lancs_dr2$`Factors identified at the end of assessment 4B` <-
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 4B` == "Yes", "4B",
ifelse(bind_lancs_dr2$`Factors identified at the end of assessment 4B` == "No", NA,
bind_lancs_dr2$`Factors identified at the end of assessment 4B`))
# Creating binary for whether referral reason included MH, DA, SU (trio of vulnerabilities) ----
trio_obs <- c("3B", "3A", "3C", "4B", "2B", "1B")
# Create a new binary column
# NOTE: More complicated code was needed to account for the fact most observations were NA.
bind_lancs_dr2 <- bind_lancs_dr2 %>%
rowwise() %>%
mutate(reftrio = ifelse(any(str_trim(c_across(starts_with("Factors identified"))) %in% trio_obs, na.rm = TRUE),
1, 0)) %>% ungroup()
# Creating a unique identifier to merge on ----
bind_lancs_dr2$concat_id <- paste(bind_lancs_dr2$`Child ID`, bind_lancs_dr2$`Referral ID (or Case ID)`)
# Add variable for LA ----
bind_lancs_dr2$LA <- "Lancashire"
# Adding LA to caseID ----
bind_lancs_dr2$childla_id <- paste(bind_lancs_dr2$`Child ID`, bind_lancs_dr2$`LA`)
new_order <- c(23,1:22)
bind_lancs_dr2 <- bind_lancs_dr2[, new_order]
# very high missingness in lancashire explore whether 0 was marked as NA.
bind_lancs_dr2 %>%
select(`Number of previous child protection plans`) %>%
table(useNA = "ifany") %>%
addmargins()
# Recode NA for Lancs as 0
bind_lancs_dr2 <- bind_lancs_dr2 %>%
mutate(`Number of previous child protection plans` = ifelse(is.na(`Number of previous child protection plans`),
0, `Number of previous child protection plans`))
###Duplicates ----
# Check for duplicate rows where all columns are the same
duplicates <- duplicated(bind_lancs_dr2) | duplicated(bind_lancs_dr2, fromLast = TRUE)
# duplicates: 124
# Show duplicate rows
lancduplicate_rows <- bind_lancs_dr2[duplicates, ]
print(lancduplicate_rows)
##################################################
# Reading in SWINDON DR2 files =======
swind_dr2_nov20 <- read_excel("Data/FS_DR2/swindon_dr2_nov20.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
swind_dr2_nov21 <- read_excel("Data/FS_DR2/swindon_dr2_nov21.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
swind_dr2_nov22 <- read_excel("Data/FS_DR2/swindon_dr2_nov22.xlsx")
swind_dr2_apr23 <- read_excel("Data/FS_DR2/swindon_dr2_apr23.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
colnames(swind_dr2_nov21)
#Additional columns in Nov 21. Code to drop them
swind_dr2_nov21 <- swind_dr2_nov21[,-c(14:18)]
# Exploring the Swindon dataframes ====
swindon_names <- c("swind_dr2_nov20", "swind_dr2_nov21", "swind_dr2_nov22", "swind_dr2_apr23")
# Loop over the dataframe names
for (df_name in swindon_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
swind_sum <- summary(df)
# Print the result
cat("summary of swindon data frames", df_name, ":", swind_sum , "\n")
}
#View(swind_sum)
comparedf(swind_dr2_nov20,swind_dr2_nov21)
# RECODING DATES containing successful and unsuccessful code----
# Exploring the class of dates
dataframe_names <- c("swind_dr2_nov20", "swind_dr2_nov21", "swind_dr2_nov22", "swind_dr2_apr23")
# REFERAL DATE
# Loop over the dataframe names
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
refdate_class <- class(df$`Referral Date`)
# Print the result
cat("Class of referal date in swindon", df_name, ":", refdate_class, "\n")
}
# Result:
# Class of referal date in swindon swind_dr2_nov20 : character
# Class of referal date in swindon swind_dr2_nov21 : POSIXct POSIXt
# Class of referal date in swindon swind_dr2_nov22 : POSIXct POSIXt
# Class of referal date in swindon swind_dr2_apr23 : POSIXct POSIXt
# ASSESSMENT DATE
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
assessdate_class <- class(df$`Assessment actual start date`)
# Print the result
cat("Class of assessment date", df_name, ":", assessdate_class, "\n")
}
# Result:
# Class of assessment date swind_dr2_nov20 : character
# Class of assessment date swind_dr2_nov21 : POSIXct POSIXt
# Class of assessment date swind_dr2_nov22 : POSIXct POSIXt
# Class of assessment date swind_dr2_apr23 : POSIXct POSIXt
# Swindon Nov 2020 appears to be character instead of date
str(swind_dr2_nov20$`Referral Date`) # structure of the data
summary(swind_dr2_nov20$`Referral Date`) # descriptive stats
str(swind_dr2_nov20$`Assessment actual start date`) # structure of the data
# Dates read in as character/Excel serial numbers. See below:
#chr [1:2559] "43810" "14/05/2020" "29/01/2020" "13/03/2020" "43596" ...
# swind_dr2_nov20$`new_Referral Date` <- as.Date(swind_dr2_nov20$`Referral Date`)
#Error in charToDate(x) :
#  character string is not in a standard unambiguous format
# Code to change the Excel serial numbers (character) into date
# Check how many missing there are before changing anything
is.na(swind_dr2_nov20$`Referral Date`) %>% sum() # Zero missing
# Excel stores dates as the number of days since January 1, 1900 (for Windows). You need to specify this origin when converting Excel serial numbers to date objects in R.
swind_dr2_nov20$`Referral Date` <- as.numeric(swind_dr2_nov20$`Referral Date`)  # Convert to numeric first
#Looking at whether any went missing
str(swind_dr2_nov20$`Referral Date`)
is.na(swind_dr2_nov20$`Referral Date`) %>% sum() # there are now 1522 NAs
#For Windows Excel (1900 date system)
swind_dr2_nov20$`Referral Date` <- as.Date(swind_dr2_nov20$`Referral Date`, origin = "1899-12-30")
# See if missings have been replaced
str(swind_dr2_nov20$`Referral Date`)
is.na(swind_dr2_nov20$`Referral Date`) %>% sum() # there are still 1522 NAs
# Above code to change date does not work. Manually changed Excel file to date category as a copy.
# Renaming old file to keep for comparison
old_swind_dr2_nov20 <- swind_dr2_nov20
rm(swind_dr2_nov20)
# Reading in modified file
new_swind_dr2_nov20 <- read_excel("Data/FS_DR2/dates_swindon_dr2_nov20.xlsx",
sheet = "DR2 - Data - sample pop",
skip = 3)
# Recode to dates
# new_swind_dr2_nov20$`Referral Date` <- as.Date(new_swind_dr2_nov20$`Referral Date`, origin = "1899-12-30")
# Error in charToDate(x) :
# character string is not in a standard unambiguous format
# Recoding the variable into an interger, and then into a date works on the dodgy Excel data, but then it deletes the observations that are already dates.
# Create new variable for the integer dates
new_swind_dr2_nov20$integer_refdate <- new_swind_dr2_nov20$`Referral Date`
# Changing the order so that the date columns are next to each other
new_order <- c(1:3, 14, 4:13)
new_swind_dr2_nov20 <- new_swind_dr2_nov20[, new_order]
# Recode this new variable as an integer, introducing missing
new_swind_dr2_nov20$`integer_refdate` <- as.integer(new_swind_dr2_nov20$`Referral Date`)
# Checking missing
is.na(new_swind_dr2_nov20$integer_refdate) %>% sum() #1522
# Recode the integers as dates
new_swind_dr2_nov20$`integer_refdate` <- as.Date(new_swind_dr2_nov20$integer_refdate, origin = "1899-12-30")
# Now recode the column where dates are in the correct format
# First delete all the integer entries which we have preservered in another column.
new_swind_dr2_nov20$`Referral Date`[grepl("^4", new_swind_dr2_nov20$`Referral Date`)] <- NA
new_swind_dr2_nov20$`Referral Date` <- as.Date(new_swind_dr2_nov20$`Referral Date`, format = "%d/%m/Y")
# Checking to see new file missingness and class
class(new_swind_dr2_nov20$`Referral Date`)
str(new_swind_dr2_nov20$`Referral Date`)
is.na(new_swind_dr2_nov20$`Referral Date`) %>% sum()
# SUCCESSFULLY reading in another file, attempting to figure out the issues at the source----
swind_dr2_nov20 <- read_excel("Data/FS_DR2/copy_swindon_dr2_nov20.xlsx")
# Checking the class shows the data has been successfully read in as a date.
class(swind_dr2_nov20$`Referral Date`)
# Transform to date rather than POSIT
swind_dr2_nov20$`Referral Date` <- as.Date (swind_dr2_nov20$`Referral Date`)
swind_dr2_nov20$`Assessment actual start date` <- as.Date(swind_dr2_nov20$`Assessment actual start date`)
# Checking this has worked
class(swind_dr2_nov20$`Referral Date`)
class(swind_dr2_nov20$`Assessment actual start date`)
# bind_swind_dr2 <- bind_rows(swind_dr2_nov20, swind_dr2_nov21, swind_dr2_nov22, swind_dr2_apr23)
# Error: can't combine $Referral ID (or Case ID)` <double> and `..2$Referral ID (or Case ID)` <character>.
# RECODE 'Referal ID' variable ----
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
refid_class <- class(df$`Referral ID (or Case ID)`)
# Print the result
cat("Class of referal ID in swindon", df_name, ":", refid_class, "\n")
}
# Class of referal ID in swindon swind_dr2_nov20 : numeric
# Class of referal ID in swindon swind_dr2_nov21 : character
# Class of referal ID in swindon swind_dr2_nov22 : character
# Class of referal ID in swindon swind_dr2_apr23 : character
# Explore the ref ID that has issues
str(swind_dr2_nov20$`Referral ID (or Case ID)`)
is.na(swind_dr2_nov20$`Referral ID (or Case ID)`) %>% sum () # = 0
# Converting it into a character
swind_dr2_nov20$`Referral ID (or Case ID)` <- as.character(swind_dr2_nov20$`Referral ID (or Case ID)`)
class(swind_dr2_nov20$`Referral ID (or Case ID)`)
is.na(swind_dr2_nov20$`Referral ID (or Case ID)`) %>% sum () # = 0
str(swind_dr2_nov20$`Referral ID (or Case ID)`)
# Binding SWINDON
# bind_swind_dr2 <- bind_rows(swind_dr2_nov20, swind_dr2_nov21, swind_dr2_nov22, swind_dr2_apr23)
# Appears to be issue with referral no further action
# RECODE 'referral no further action' variable ----
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
refnoa_class <- class(df$`Referral No further action`)
# Print the result
cat("Class of referal no further action in swindon", df_name, ":", refnoa_class, "\n")
}
# Results
# Class of referal no further action in swindon swind_dr2_nov20 : numeric
# Class of referal no further action in swindon swind_dr2_nov21 : character
# Class of referal no further action in swindon swind_dr2_nov22 : numeric
# Class of referal no further action in swindon swind_dr2_apr23 : numeric
# Exploring the Nov 21 character variable
str(swind_dr2_nov21$`Referral No further action`)
swind_dr2_nov21 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
# Result
# 0      1    Sum
# 3793  293   4086
# Appears to be ok to convert to numeric
swind_dr2_nov21$`Referral No further action` <- as.numeric(swind_dr2_nov21$`Referral No further action`)
# Checking how the conversion went
swind_dr2_nov21 %>%
select(`Referral No further action`) %>%
table(useNA = "ifany") %>%
addmargins()
# bind_swind_dr2 <- bind_rows(swind_dr2_nov20, swind_dr2_nov21, swind_dr2_nov22, swind_dr2_apr23)
# Bind shows that the year and month of child's bith has different classes
# RECODE 'Year and month of child birth' variable ----
# Exploring year and month of birth across datasets
for (df_name in dataframe_names) {
# Get the dataframe object using its name
df <- get(df_name)
# Check the class of the Month variable
childbirth_class <- class(df$`Year and month of birth of the child`)
# Print the result
cat("Class of referal no further action in swindon", df_name, ":", childbirth_class, "\n")
}
# Class of referal no further action in swindon swind_dr2_nov20 : POSIXct POSIXt
# Class of referal no further action in swindon swind_dr2_nov21 : character
# Class of referal no further action in swindon swind_dr2_nov22 : character
# Class of referal no further action in swindon swind_dr2_apr23 : character
# Result shows that November 20 has a different class.
str(swind_dr2_nov20$`Year and month of birth of the child`)
# Compare it to another one
str(swind_dr2_nov21$`Year and month of birth of the child`)
# NOV 21
swind_dr2_nov21$`Year and month of birth of the child` <-
as.Date(paste("01", swind_dr2_nov21$`Year and month of birth of the child`, sep = "/"),
format = "%d/%m/%Y"))
# NOV 22
str(swind_dr2_nov22$`Year and month of birth of the child`)
swind_dr2_nov22$`Year and month of birth of the child` <-
as.Date(paste("01", swind_dr2_nov22$`Year and month of birth of the child`, sep = "/"),
format = "%d/%m/%Y"))
swind_dr2_nov22$`Year and month of birth of the child` <-
as.Date(paste("01", swind_dr2_nov22$`Year and month of birth of the child`, sep = "/"),
format = "%d/%m/%Y")
swind_dr2_nov21$`Year and month of birth of the child` <-
as.Date(paste("01", swind_dr2_nov21$`Year and month of birth of the child`, sep = "/"),
format = "%d/%m/%Y")
